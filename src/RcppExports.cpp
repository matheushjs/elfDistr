// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_dkwcwg
NumericVector cpp_dkwcwg(const NumericVector& x, const NumericVector& alpha, const NumericVector& beta, const NumericVector& gamma, const NumericVector& a, const NumericVector& b, const bool& log_prob);
RcppExport SEXP _extraDistr_cpp_dkwcwg(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dkwcwg(x, alpha, beta, gamma, a, b, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pkwcwg
NumericVector cpp_pkwcwg(const NumericVector& x, const NumericVector& alpha, const NumericVector& beta, const NumericVector& gamma, const NumericVector& a, const NumericVector& b, const bool& lower_tail, const bool& log_prob);
RcppExport SEXP _extraDistr_cpp_pkwcwg(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pkwcwg(x, alpha, beta, gamma, a, b, lower_tail, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qkwcwg
NumericVector cpp_qkwcwg(const NumericVector& p, const NumericVector& alpha, const NumericVector& beta, const NumericVector& gamma, const NumericVector& a, const NumericVector& b, const bool& lower_tail, const bool& log_prob);
RcppExport SEXP _extraDistr_cpp_qkwcwg(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool& >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool& >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qkwcwg(p, alpha, beta, gamma, a, b, lower_tail, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rkwcwg
NumericVector cpp_rkwcwg(const int& n, const NumericVector& alpha, const NumericVector& beta, const NumericVector& gamma, const NumericVector& a, const NumericVector& b);
RcppExport SEXP _extraDistr_cpp_rkwcwg(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rkwcwg(n, alpha, beta, gamma, a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_extraDistr_cpp_dkwcwg", (DL_FUNC) &_extraDistr_cpp_dkwcwg, 7},
    {"_extraDistr_cpp_pkwcwg", (DL_FUNC) &_extraDistr_cpp_pkwcwg, 8},
    {"_extraDistr_cpp_qkwcwg", (DL_FUNC) &_extraDistr_cpp_qkwcwg, 8},
    {"_extraDistr_cpp_rkwcwg", (DL_FUNC) &_extraDistr_cpp_rkwcwg, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_extraDistr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
